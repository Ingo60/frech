{--

    # Forsyth-Edwards-Notation

    from 'https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation Wikipedia':

    ...

    Forsyth–Edwards Notation (FEN) is a standard notation for describing 
    a particular board position of a chess game. The purpose of FEN is to 
    provide all the necessary information to restart a game from a particular position.

    ...

    A FEN "record" defines a particular game position, 
    all in one text line and using only the ASCII character set. 
    A text file with only FEN data records should have the file extension ".fen".

    A FEN record contains six fields. The separator between fields is a space. The fields are:

    1. Piece placement (from white's perspective). Each rank is described, 
    starting with rank 8 and ending with rank 1; within each rank, 
    the contents of each square are described from file "a" through file "h". 
    Following the Standard Algebraic Notation (SAN), 
    each piece is identified by a single letter taken from the standard English names 
    (pawn = "P", knight = "N", bishop = "B", rook = "R", queen = "Q" and king = "K").
    White pieces are designated using upper-case letters ("PNBRQK") 
    while black pieces use lowercase ("pnbrqk"). 
    Empty squares are noted using digits 1 through 8 (the number of empty squares), 
    and "/" separates ranks.

    2. Active color. "w" means White moves next, "b" means Black.

    3. Castling availability. If neither side can castle, this is "-". 
    Otherwise, this has one or more letters: 
    "K" (White can castle kingside), 
    "Q" (White can castle queenside), 
    "k" (Black can castle kingside), and/or 
    "q" (Black can castle queenside).

    4. En passant target square in algebraic notation. 
    If there's no en passant target square, this is "-". 
    If a pawn has just made a two-square move, this is the position "behind" the pawn. 
    This is recorded regardless of whether there is a pawn in position to make an en passant capture.

    5. Halfmove clock: This is the number of halfmoves since the last capture or pawn advance. 
    This is used to determine if a draw can be claimed under the fifty-move rule.

    6. Fullmove number: The number of the full move. It starts at 1, and is incremented after Black's move.
-}

module frech.FEN where

import frech.Daten


--- the order of the fields as they appear in FEN
fenOrder = join fenRanks
fenRanks = [[A8…H8], [A7…H7], [A6…H6], [A5…H5], [A4…H4], [A3…H3], [A2…H2], [A1…H1]]

decodeFEN ∷ String → (String | Position)
decodeFEN fen = case '\s+'.splitted fen of
        [fen1,fen2,fen3,fen4,fen5,fen6] -> 
            decodePlacement fenOrder (unpacked fen1) emptyBoard
            >>= decodePlayer fen2
            >>= decodeCastling (unpacked fen3)
            >>= decodeEP fen4
            >>= pure . Position.rehash
        _ -> Left "Invalid FEN: must be 6 space separated fields"
    where
        decodeCastling ['-'] p  = pure p
        decodeCastling [] p     = pure p
        decodeCastling (c:cs) p = case c of
            'K' → decodeCastling cs p.{flags ← union (singleton G1)}
            'Q' → decodeCastling cs p.{flags ← union (singleton C1)}
            'k' → decodeCastling cs p.{flags ← union (singleton G8)}
            'q' → decodeCastling cs p.{flags ← union (singleton C8)}
            _   → Left ("Invalid FEN: illegal char in castling field " ++ show c)

        decodeEP "-" p = pure p 
        decodeEP fld p = case Index.read fld of
            Just i → pure p.{flags ← union (singleton i)}
            Nothing → Left ("Invalid FEN: bad en passant field " ++ show fld)

        decodePlayer "b" p = pure p
        decodePlayer "w" p = pure p.{flags ← union (singleton A1)}
        decodePlayer bad p = Left ("Invalid FEN: second field must be \"w\" or \"b\", found "
                                    ++ show bad) 
        decodePlacement  []      []          p = Right p
        decodePlacement  []      (_:cs)      p = Left  "Invalid FEN: placement string too long"
        decodePlacement  (i:is)  []          p = Left ("Invalid FEN: positions " 
                                                        ++ show (i:is) ++ " missing")
        -- neither is nor cs maybe empty from here on
        decodePlacement  (i:is) (c:cs)       p
            | c > '0' && c < '9' = decodePlacement (drop (ord c - ord '1') is) cs p
            | otherwise = case c of
                'K' -> decodePlacement is cs (Daten.place WHITE KING wo p)
                'Q' -> decodePlacement is cs (Daten.place WHITE QUEEN wo p)
                'R' -> decodePlacement is cs (Daten.place WHITE ROOK wo p)
                'B' -> decodePlacement is cs (Daten.place WHITE BISHOP wo p)
                'N' -> decodePlacement is cs (Daten.place WHITE KNIGHT wo p)
                'P' -> decodePlacement is cs (Daten.place WHITE PAWN wo p)
                'k' -> decodePlacement is cs (Daten.place BLACK KING wo p)
                'q' -> decodePlacement is cs (Daten.place BLACK QUEEN wo p)
                'r' -> decodePlacement is cs (Daten.place BLACK ROOK wo p)
                'b' -> decodePlacement is cs (Daten.place BLACK BISHOP wo p)
                'n' -> decodePlacement is cs (Daten.place BLACK KNIGHT wo p)
                'p' -> decodePlacement is cs (Daten.place BLACK PAWN wo p)
                '/' | i `elem` [A7, A6, A5, A4, A3, A2, A1] = decodePlacement (i:is) cs p 
                    | otherwise = Left ("Invalid FEN: expected placement for " 
                                    ++ show i ++ ", found '/'")
                _  -> Left ("Invalid FEN: bad placement character " ++ show c) 
            where
                wo = singleton i

encodeFEN :: Position -> String
encodeFEN pos = joined " " [fen1, fen2, fen3, fen4, fen5, fen6]
    where
        fen6 = "1"      -- we don't count full moves
        fen5 = show pos.getPlyCounter
        fen4 = if null eps then "-" else show (bitIndex eps)
        fen3 = if null crs then "-" else foldIndexes encodeCR "" crs
        eps  = pos.flags `inter` Position.enPassantBits
        crs  = pos.flags `inter` Position.castlingBits
        encodeCR C1 acc = "Q" ++ acc
        encodeCR G1 acc = "K" ++ acc
        encodeCR C8 acc = "q" ++ acc
        encodeCR G8 acc = "k" ++ acc
        encodeCR xx acc = "?" ++ acc    -- garbage
        fen2 = if pos.turn == WHITE then "w" else "b"
        fen1 = joined "/" ranks
        ranks = map mkRank fenRanks
        mkRank = correctEmpty . joined "" . map pp 
        pp ix = case whatIsOn pos ix of
            fi -> case fi.piece of
                EMPTY   → "-"
                KING    → if fi.player == WHITE then "K" else "k"
                QUEEN   → if fi.player == WHITE then "Q" else "q"
                ROOK    → if fi.player == WHITE then "R" else "r"
                BISHOP  → if fi.player == WHITE then "B" else "b"
                KNIGHT  → if fi.player == WHITE then "N" else "n"
                PAWN    → if fi.player == WHITE then "P" else "p"
        correctEmpty  =   _.replaceAll '-{1}'  "1"
                        . _.replaceAll '-{2}'  "2"
                        . _.replaceAll '-{3}'  "3"
                        . _.replaceAll '-{4}'  "4" 
                        . _.replaceAll '-{5}'  "5" 
                        . _.replaceAll '-{6}'  "6" 
                        . _.replaceAll '-{7}'  "7" 
                        . _.replaceAll '-{8}'  "8"  