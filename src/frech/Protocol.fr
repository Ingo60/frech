--- Protocol handler for communication with xboard.
module frech.Protocol 
    inline(Variation.max, Variation.>, Variation.min, Variation.<) where

import Control.Concurrent(MVar, forkIO, forkOS)
import System.Random(randomIO, randomRIO)
import Data.List(sortBy)
import Data.Bits(.^.)
import Data.HashMap as HM(HashMap, values, lookup, insert, size)
import Data.JSON(ToJSON, struct, Struct, assoc)

import frech.Daten
import frech.FEN(decodeFEN, encodeFEN)
import frech.Eval(opening, endgame, blackIsMate)

native gc java.lang.System.gc :: () -> IO ()

data Transposition = TR {   !depth :: Int, 
                            !score :: Int           --- integrated bounds: n*4 exact, n*4+1 lower bound, n*4-1 upper bound 
                            !pvMoves  :: [Move]     --- moves of the principal variation 
                            !posMoves :: [Move]     --- ordered moves of the associated position 
                        }
instance ToJSON Transposition where
    toJSON tr = Struct [assoc "depth" tr.depth, 
                        assoc "score" tr.score,
                        assoc "pvMoves" tr.pvMoves, 
                        assoc "posMoves" tr.posMoves]

type TranspositionTable = HashMap Position Transposition

data Variation = PV { !moves :: [Move], !val :: Int, !nodes :: Int, !depth :: Int, 
                      !hash  :: TranspositionTable
                    }

instance ToJSON Variation where
    toJSON pv = Struct [assoc "depth" pv.depth,
                        assoc "val"   pv.val,
                        assoc "nodes" pv.nodes,
                        assoc "moves" pv.moves,
                        assoc "hashsz" (size pv.hash)]

instance Ord Variation where
    hashCode pv = 0
    pv1 < pv2 = pv1.val < pv2.val
    pv1 == pv2 = pv1.val == pv2.val
    pv1 > pv2 = pv1.val > pv2.val
    pv1 <=> pv2 = pv1.val <=> pv2.val
    max pv1 pv2 = if pv1 > pv2 then pv1 else pv2
    min pv1 pv2 = if pv1 < pv2 then pv1 else pv2
instance Show Variation where
    show pv = show pv.depth ++ "  " ++ show pv.val ++ "  " ++ joined " " (map algebraic pv.moves)

--- A bit cheaper than
--- > maximum vs 
goMaximum, goMinimum ∷ Variation → [Variation] → Variation
goMaximum !best (pv:pvs) = goMaximum (max best pv) pvs
goMaximum !best []       = best 
goMinimum !best (pv:pvs) = goMinimum (min best pv) pvs
goMinimum !best []       = best 


--- when the driver receives 'NoMore' or 'EOF' there won\'t be something to read from this 'MVar'thereafter
data Input = 
        Line String     --- Sent by input reader when it has read a line of input.
        | EOF           --- Sent by the input reader when there is no more input. 
        | MV !Int !Variation --- Sent by strategy identified by some number when it has found a 'Move'
        | Forget Int    --- Sent by strategy when all previously computed variations should get forgotten 
        | NoMore Int    --- Sent by strategy identified by some number when it can't find more 'Move's.
        | Remove Int Variation    ---- Sent by strategy to remove/invalidate a 'Variation'.
deriving Eq Input
deriving Show Input

type Command = Bool
type Clock   = Long


data State = FORCED | PLAYING | THINKING Clock | TERMINATED
derive Show State

type Strategy = GameState → IO ()

data TimeControl = TC {
        !myTime, !oTime ∷ Clock         --- My remaining time and her remaining time in milliseconds
        !lvlMoves   :: Int              --- How many moves per game, if 0 then incremental 
        !lvlTime    :: Clock            --- Time for entire game
        !lvlIncr    :: Clock            --- incremental time
    }


data GameState = GS {
        !name ∷ String              --- identification 
        !history :: [Position]       {-- 'Position's reached since last "new" or "setboard" xboard-command.
                                        The head of this non-empty list is the current position.
                                        The last entry is 'initialBoard' in case of "new" or the 
                                        'Position' received through "setboard".
                                        
                                         This list is shortened only on xboard "undo" commands.
                                         The implementation will refuse to undo the initial 'Position'. -}
        !plan :: Maybe Variation    --- The 'Variation' we are playing. 2nd entry is expected opponent move, 3rd our continuation
        !openingMap :: HashMap Position [Move]    --- moves to expect in the opening
        !killerMoves :: HashMap Move Int --- killer 'Move's found during search
        !risk  :: Int                    {-- risk factor in iterative pruning: keep moves contributing _risk_% -} 
        !nodes :: Int                    --- counter for nodes searched   
        !state :: State              {-- 
                                        Are we in force mode, playing or thinking?
                                        In 'THINKING' a strategy task will be active. -}      
        !player :: Player            --- The colour we are playing.
        !rvar, !tvar :: MVar Command  {-- 
                                        Commands are sent to the reader or strategy task through this 
                                        'MVar's. Normally every input must be answered immediately
                                        with either *true* for "continue" or *false* for "terminate" except for
                                        the 'EOF' and 'NoMore' messages. The input reader or strategy will
                                        terminate once they send this and not read any answer.
                                        
                                        The driver shall not send any more commands once it has sent "false" 
                                        (though this should not do big harm).
                                        
                                        A strategy must be careful not to send anything over the input
                                        channel when it has received "false". The driver may send "false"
                                        (but not "true")
                                        even before the strategy sends a move to signal that it isn't 
                                        interested anymore in 'Move's for the 'Position' the strategy 
                                        is working on.
                                        This can happen when the driver already sent the previous best move
                                        because the time was running out, or in answer to the "?"
                                        xboard command, or when xboard switched to "force" mode during
                                        thinking.   
                                    --}  
        !ivar       :: MVar Input    --- 'Input' from the 'reader' and strategies.
        !sid        :: Int           {-- 
                                        Strategy identifier. Used to sort out unwanted input from
                                        strategies lagging behind. Incremented on each half-move, so that
                                        only input with an id that matches this 'GameState's sid
                                        is regarded as valid.
                                    -}
        !best           ∷ Maybe Variation  --- best move reported so far
        !tc             ∷  TimeControl  ---- Information for time control
        !cores          ∷ Int           --- # of cores we're allowed to use
    } 
    where 
        current GS{history} = head history
        --- Time per move in milliseconds
        --- This is just enough to make approximate 10 more moves, however, 
        timePerMove ∷ GameState → Long
        timePerMove gs =  max (-500) (min 3000 ((gs.tc.myTime - gs.tc.oTime) `quot` 3))       -- we are ahead in time 
                        + (max 1000 (gs.tc.myTime `quot` 25))       -- 1 second or enough to play 20 moves
        --- tell the driver something without expecting an answer
        tellDriver :: GameState -> Input -> IO ()
        tellDriver gs inp = gs.ivar.put inp 
        --- tell the driver something and get the answer
        talkDriver :: GameState -> Input -> IO Command
        talkDriver gs inp = do 
            gs.ivar.put inp
            gs.tvar.take
        tellNoMore, tellForget :: GameState → IO ()
        tellNoMore gs = tellDriver gs (NoMore gs.sid)
        tellForget gs = tellDriver gs (Forget gs.sid)
        talkPV :: GameState → Variation → IO Command
        talkPV gs var = talkDriver gs (MV gs.sid var) 
        talkPVs :: GameState → [Variation] → IO Command
        talkPVs gs vars = foldM (\b\v -> if b then talkDriver gs (MV gs.sid v) else pure false) true vars
        tellRemove ∷ GameState → Variation → IO ()
        tellRemove gs pv = tellDriver gs (Remove gs.sid pv) 



reader :: MVar Command -> MVar Input -> IO ()
reader cvar dvar = do
    -- println ("# reader waiting for input")
    -- stdout.flush
    input <- fmap Line getLine `catch` (\(x::EOFException) -> pure EOF)
    -- println ("# reader sending " ++ show input)
    -- stdout.flush 
    dvar.put input
    if input == EOF then pure ()
    else do
        continue <- cvar.take
        -- println ("# reader got answer " ++ show continue)
        -- stdout.flush
        if continue then reader cvar dvar else pure ()

protocol :: Strategy → GameState → IO ()
protocol strategy gs  = do
        let (_x, hmb, _) = HashMap.collisions gs.openingMap
        --println ("# protocol state=" ++ gs.state.show ++ ", player=" ++ gs.player.show
        --            -- ". cores=" ++ show gs.cores
        --            ++ " collision nodes=" ++ show hma
        --            ++ " collision keys=" ++ show hmb)
        --stdout.flush
        
        case gs.state of
            TERMINATED → pure ()
            FORCED → do
                cmd ← gs.ivar.take
                commandProcessing cmd >>= protocol strategy 
            PLAYING
                | gs.current.turn == gs.player → do
                    cmd ← gs.ivar.poll
                    maybe (think strategy gs) commandProcessing cmd >>= protocol strategy
                | otherwise → gs.ivar.take >>= commandProcessing >>= protocol strategy
            THINKING since = do
                now ← System.currentTimeMillis ()
                let time = max 500 (gs.timePerMove - (now - since))
                    -- when we don't have a move yet, wait at all costs, rather than to resign
                    todo = if isNothing gs.best 
                            then Just <$> gs.ivar.take 
                            else gs.ivar.wait time.int
                cmd ← todo
                case cmd of
                    Nothing → do                    -- time out while thinking
                        println "# Thinking timed out." >> stdout.flush
                        gs.tvar.offer false         -- tell strategy to finish
                        finishThinking ()
                        sendMove gs >>= collectGarbage >>= protocol strategy
                    Just EOF → do
                        println "# EOF on standard input while thinking!?" >> stdout.flush
                        gs.tvar.offer false
                        finishThinking () 
                        pure ()
                    Just (Forget sid)
                        | sid == gs.sid = do
                            println "# forgetting previous variation"
                            stdout.flush
                            protocol strategy gs.{best=Nothing}
                        | otherwise = protocol strategy gs
                    Just (Remove sid pv)
                        | sid == gs.sid = do
                            println ("# forgetting variation " ++ show pv)
                            stdout.flush
                            case gs.best of
                                Nothing → protocol strategy gs
                                Just bv → if head pv.moves == head bv.moves 
                                            then protocol strategy gs.{best=Nothing}
                                            else protocol strategy gs
                        | otherwise = protocol strategy gs
                    Just (MV id pv)
                        | id == gs.sid = do
                            now ← System.currentTimeMillis ()
                            let continue = (now - since) < (9 * gs.timePerMove) `quot` 10
                                nodes = gs.nodes + pv.nodes
                            gs.tvar.put continue
                            println ("# we have used " ++ show (now-since) 
                                        ++ "ms of "    ++ show (gs.timePerMove)
                                        ++ "ms, continue=" ++ show continue)
                            now ← System.currentTimeMillis ()
                            println (
                                    " " ++ show pv.depth
                                ++  " " ++ show (gs.player.factor * pv.val)     -- score in centipawns
                                ++   " " ++ show ((now - since + 5) `quot` 10)  -- time  in centiseconds
                                ++   " " ++ show nodes                    -- nodes
                                --   " " ++ show (fold (+) 0 (map _.useful (values pv.hash)))
                                ++   " " ++ joined " " (map algebraic (take 32 pv.moves)))
                            stdout.flush
                            oracle ← randomIO :: IO Bool
                            let best = case gs.best of
                                    Nothing -> Just pv
                                    Just old ->
                                        if not (null pv.moves) && not (null old.moves)
                                            && head pv.moves == head old.moves
                                            then Just pv 
                                        else if abs (pv.val - old.val) <= 5 
                                            then if oracle then Just pv else Just old
                                            else if gs.player == WHITE && pv.val > old.val
                                                then Just pv
                                                else if gs.player == BLACK && pv.val < old.val
                                                    then Just pv
                                                    else Just old 
                                    
                            if continue 
                                then protocol strategy gs.{best, nodes}
                                else finishThinking () 
                                        >> sendMove gs.{best, nodes=0} 
                                        >>= collectGarbage 
                                        >>= protocol strategy
                        | otherwise = do
                            println "# ignoring move from previous strategy instance." >> stdout.flush
                            protocol strategy gs
                    Just (NoMore id)
                        | id == gs.sid = do
                            println "# No more moves." >> stdout.flush 
                            sendMove gs.{nodes=0} >>= protocol strategy
                        | otherwise = do
                            println "# ignoring NoMore from previous strategy instance." >> stdout.flush
                            protocol strategy gs
                    -- xboard command while thinking
                    -- we accept ping, force, new, quit, result and ?
                    Just (Line 's*quit\b') → do
                        gs.tvar.offer false
                        finishThinking ()
                        gs.rvar.put false
                        pure ()
                    Just (Line xboard) → do
                        gs.rvar.put true 
                        case xboard of
                            m~'^\s*ping\s+(\d+)' → do
                                -- let p = maybe [] (pure . String.atoi) (m.group 1) 
                                -- protocol strategy gs.{pings <- (p++)}
                                protocol strategy gs
                            '^\s*(force|result)\b' → do
                                gs.tvar.offer false
                                finishThinking () 
                                -- pong gs.pings
                                protocol strategy gs.{state=FORCED, best=Nothing, nodes=0}
                            '^\s*new\b' → do
                                gs.tvar.offer false 
                                finishThinking ()
                                protocol strategy gs.{history=[initialBoard], best=Nothing,
                                                     nodes=0, state=PLAYING, player=BLACK}
                            "?" → sendMove gs >>= protocol strategy
                            other → do
                                println ("Error (command not legal now): " ++ xboard)
                                stdout.flush
                                protocol strategy gs
                        
        
    where
        think ∷ Strategy → GameState → IO GameState
        think strategy gs = do
            let ms = moves gs.current
                mate = null ms && inCheck gs.current gs.current.turn
                stalemate = null ms && not mate
            if mate || stalemate 
            then do
                println "# thinking finds game that has ended"
                stdout.flush
                pure gs.{state=FORCED, best=Nothing, nodes=0}
            else do
                now ← System.currentTimeMillis ()
                mv  ← MVar.newEmpty
                beginThinking ()
                let gs' = gs.{state=THINKING now, best=Nothing, tvar=mv, nodes=0}
                forkIO (strategy gs' `catch` \(e::Exception) -> gs'.tellNoMore)
                pure gs'
        commandProcessing cmd = case cmd of
                EOF     → pure gs.{state=TERMINATED}   -- too bad
                Forget _ -> pure gs
                Remove _ _ -> pure gs
                MV  _ _  → do
                    println "# ignoring an unexpected move." >> stdout.flush
                    gs.tvar.offer false
                    pure gs
                NoMore _ → do
                    println "# ignoring an unexpected NoMore." >> stdout.flush
                    pure gs
                Line command → do
                    xboardCommand command gs
        -- send outstanding pongs
        -- pong [] = pure ()
        -- pong (p:ps) = pong ps >> println ("pong " ++ show p) >> stdout.flush
        sendMove ∷ GameState → IO GameState
        sendMove gs = case gs.best of
                --[x] | length gs.backup > 1, 
                --      gs.player == WHITE && all (>x) gs.backup
                --        || gs.player == BLACK && all (<x) gs.backup = do
                --            println "# WARNING: WE BETTER USE THE BACKUP INSTEAD A SINGLE BAD MOVE"
                --            stdout.flush
                --            sendMove gs.{best=gs.backup, backup=[]}

                Nothing 
                    --| not (null gs.backup) → do
                    --        println "# WARNING: WE NEED TO USE THE BACKUP"
                    --        stdout.flush
                    --        sendMove gs.{best=gs.backup, backup=[]}
                    | otherwise →  do            -- now we have a problem, there is no move
                            println "# strategy busy, but no move found yet"
                            println "resign"
                            stdout.flush
                            pure gs.{state=FORCED}
                Just pv → do
                    -- coin ← randomIO
                    --let spv = if gs.player == WHITE then sortBy (descending _.val) variations 
                    --                                else sortBy (ascending _.val) variations
                    --    equals = takeWhile (\a -> (head spv).val - a.val < 5) spv
                    --index ← randomRIO (0, length equals - 1)
                    --let pv = case equals of
                    --            (pv1:pv2:_) → if   gs.player.factor * pv1.val > 50     -- we can't allow even less! 
                    --                            && abs pv1.val < blackIsMate `quot` 2  -- dont gamble with mate
                    --                            then equals !! index else pv1
                    --            single -> head spv
                                
                    unless (null pv.moves) do 
                        let m = head pv.moves
                        --println ("# sorted pvs: " ++ show (
                        --    map (\p -> (algebraic (head p.moves), p.val)) spv))
                        println ("move " ++ algebraic m)
                        
                        -- expected = if length pv.moves > 1 then Just $! head (tail pv.moves) else Nothing
                    let pos = if null pv.moves then gs.current else applyMove gs.current (head pv.moves)
                        ms  = moves pos
                        mate = null ms && inCheck pos pos.turn
                        stalemate = null ms && not mate
                        moves50 = not mate && not stalemate && pos.getPlyCounter > 99
                        repetition = not mate && not stalemate && not moves50 
                                              && length (filter (==pos) gs.history) > 1
                        finished = mate || stalemate || moves50 || repetition
                    
                    --println ("# after " ++ show m)
                    --println ("# " ++ show (whatIsOn pos m.from))
                    --println ("# " ++ show (whatIsOn pos m.to)) 

                    when (stalemate)  do  println "1/2-1/2 {Stalemate}"
                    when (mate)       do  if pos.turn == WHITE
                                            then println "0-1 {Black mates}"
                                            else println "1-0 {White mates}"
                    when (moves50)    do  println "1/2-1/2 {50 moves}"
                    when (repetition) do  println "1/2-1/2 {repetition}"
                    stdout.flush
                    -- pong gs.pings
                    pure  gs.{history ← (pos.clearRootPlyCounter:), sid ← succ, plan=Just pv,
                                state = if finished then FORCED else PLAYING,
                                best  = Nothing}

        collectGarbage :: GameState -> IO GameState
        collectGarbage gs = pure gs.{plan ← fmap (_.{hash=empty})}
        collectGarbageOld gs = do
            gc ()                   -- now release the stuff from previous iteration
            case gs.plan of
                -- Just pv -> pure gs.{plan=Just pv.{hash=cleanup [gs.current] pv.hash empty}}
                Just pv -> case pv.{hash=cleanup [gs.current] pv.hash empty}
                    of !cleanedPV -> pure gs.{plan=Just cleanedPV}
                Nothing -> pure gs
        
        cleanup ∷ [Position] → TranspositionTable → TranspositionTable → TranspositionTable
        cleanup []     old new = new
        cleanup (p:ps) old new
            | Just e ← lookup p new = cleanup ps old new    -- already in new
            | Just e ← lookup p old = cleanup (children p e.posMoves ++ ps) old (insert p e new)
            | otherwise = cleanup ps old new
            where
                children ∷ Position → [Move] → [Position]
                children p ms = [ applyMove p m | m ← ms ]
 
fmt :: Long → String
fmt = "0x%016d".format

checkApplyMove :: Position → Move → Position → IO ()
checkApplyMove pos1 move pos2 = do
    when (pos2.zobrist != pos2.hash) do
        println "# ZOBRIST HASH FAILURE"
        println ("# in position  " ++ show pos1)
        println ("# applied move " ++ show move)
        println ("# result posn  " ++ show pos2)
        println ("# hash is " ++ fmt pos2.hash 
              ++ ", should be " ++ fmt pos2.zobrist 
              ++ " delta " ++ fmt (pos2.zobrist .^. pos2.hash))
        stdout.flush      
        pure ()


xboardCommand ∷ String → GameState → IO GameState
xboardCommand command gs = do
    --println ("# xboardCommand: " ++ command)
    --stdout.flush
    gs.rvar.put  (command !~ '^\s*quit\b') 
    case command of
        '^\s*(accepted|rejected|xboard|random|hard|easy|post|computer)\b'    
                            → pure gs
        m~'^\s*cores\s+(\d+)' → case m.group 1 of
                                    Just c → do
                                        println ("# setting cores to " ++ show (atoi c)) 
                                        pure gs.{cores = atoi c}
                                    Nothing → do
                                        println ("# cannot set cores???") >> stdout.flush 
                                        pure gs
        '^\s*protover '     → do
            println ("feature myname=\"frech " ++ gs.name ++ "\"")
            println ("feature ping=0 setboard=1 playother=1 usermove=1 draw=0 "
                        ++ "sigint=0 analyze=1 variants=\"normal\" colors=0 nps=0 "
                        ++ "debug=1 memory=0 smp=1 "
                        ++ "done=1")
            stdout.flush
            pure gs
        '^\s*new\b'         → pure gs.{history=[initialBoard], state=PLAYING, player=BLACK,
                                        nodes=0, plan=Nothing, best=Nothing, killerMoves=empty}
        '^\s*quit\b'        → do
                                gs.tvar.offer false     -- just in case
                                pure gs.{state=TERMINATED}
        '^\s*force\b'       → pure gs.{state=FORCED}
        '^\s*playother\b'   → pure gs.{state=PLAYING, player = gs.current.turn.opponent}
        '^\s*go\b'          → pure gs.{state=PLAYING, player = gs.current.turn}
        -- set the board to FEN
        '^\s*setboard\b'    → 
            case decodeFEN (command.replaceFirst '^\s*setboard\s+' "") of
                Left s → do
                    println ("Error (" ++ s ++ ")") >> stdout.flush
                    pure gs.{state=FORCED}
                Right p → do
                    pure gs.{history=[p], state=FORCED, 
                            nodes=0, plan=Nothing, best=Nothing, killerMoves=empty}
        -- user makes a move
        '^\s*usermove\s+\w+\b' → do
            -- println "# in usermove"
            stdout.flush
            let p    = head gs.history
                alg  = command.replaceFirst '^\s*usermove\s+' ""
                valid = moves p
            case unAlgebraic valid alg of
              Nothing → do
                    println ("Illegal move: '" ++ alg ++ "'")
                    println ("# valid moves in this position: " ++ joined " " (map algebraic valid)) 
                    stdout.flush
                    pure gs
              Just mv → do
                    let pos = applyMove p mv
                        gs' = gs.{history ← (pos.clearRootPlyCounter:), sid ← succ,
                                    nodes=0, best=Nothing, killerMoves=empty}
                    --println ("# after " ++ show mv)
                    --println ("# " ++ show (whatIsOn pos mv.from))
                    --println ("# " ++ show (whatIsOn pos mv.to))
                    checkApplyMove p mv pos
                    case gs.plan of 
                        Just PV{moves=_:expected:_}
                            | expected == mv → pure gs'        -- current plan holds
                            | endgame p      → pure gs'.{plan=Nothing}
                        sonst ->
                            case HM.lookup p gs.openingMap of
                                Just ems 
                                  | mv `notElem` ems →   do 
                                    appendFile ("data/opening-" ++ (show gs.player).toLowerCase)
                                        (algebraic mv ++ " " ++ encodeFEN p ++ "\n")
                                    pure gs'.{openingMap ← HM.insert p (mv:ems), plan=Nothing}
                                  | otherwise = pure gs'.{plan=Nothing}    -- we know this one already
                                Nothing → do
                                    appendFile ("data/opening-" ++ (show gs.player).toLowerCase)
                                        (algebraic mv ++ " " ++ encodeFEN p ++ "\n")
                                    pure gs'.{openingMap ← HM.insert p [mv], plan=Nothing}
                        -- sonst → pure gs'.{plan=Nothing}                         

        -- result 
        '^\s*result ' -> pure gs.{state=FORCED}
        -- undo moves
        '^\s*undo\b'  → if (length gs.history > 1) 
                            then pure gs.{state=FORCED, history ← drop 1} 
                            else pure gs.{state=FORCED}
        '^\s*remove\b'  →  if (length gs.history > 2)
                            then pure gs.{state=FORCED, history ← drop 2}
                            else pure gs.{state=FORCED}
        -- time control 
        '^\s*(level|st|sd|nps)\b' → pure gs
        '^\s*time\s+\d+' → pure gs.{tc = gs.tc.{myTime = 10 * (command.replaceFirst '^\s*time\s+' "").atol}}
        '^\s*otim\s+\d+' → pure gs.{tc = gs.tc.{oTime  = 10 * (command.replaceFirst '^\s*otim\s+' "").atol}}
        
        other                   → do
            println ("Error (unknown command): " ++ command)
            stdout.flush
            pure gs
        
